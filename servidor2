
import datetime 
import threading
from time import sleep


class Product:
    def __init__(self, code, name, description, quantity, price, min_stock):
        self.code = code
        self.name = name
        self.description = description
        self.quantity = quantity
        self.price = price
        self.min_stock = min_stock
        self.movements = []

    def add_entry(self, quantity):
        self.quantity += quantity
        self.movements.append((datetime.datetime.now(), "entrada", quantity))

    def add_exit(self, quantity):
        if self.quantity >= quantity:
            self.quantity -= quantity
            self.movements.append((datetime.datetime.now(), "saída", quantity))

    def get_stock_status(self):
        return {
            "code": self.code,
            "name": self.name,
            "description": self.description,
            "quantity": self.quantity,
            "price": self.price,
            "min_stock": self.min_stock,
        }

# Classe que representa um usuário do sistema
class User:
    def __init__(self, name, public_key, client_object):
        self.name = name
        self.public_key = public_key
        self.client_object = client_object

# Classe que representa o sistema de gestão de estoque
class StockManagementSystem:
    def __init__(self):
        self.users = {}  # Dicionário de usuários (nome do usuário -> objeto do usuário)
        self.products = {}  # Dicionário de produtos (código do produto -> objeto do produto)
        self.clients = {}  # Dicionário de clientes (nome do cliente -> objeto do cliente)
 
    def register_user(self, name, public_key, client_object):
        if name not in self.users:
            user = User(name, public_key, client_object)
            self.users[name] = user
            return f"Usuário {name} registrado com sucesso."
        else:
            return f"Usuário {name} já está registrado."


 
    def record_entry(self, user_name, code, name, description, quantity, price, min_stock):
        if user_name in self.users:
            user = self.users[user_name]
            if code in self.products:
                print("Produto adicionado")
                product = self.products[code]
                
                 
                product.add_entry(quantity)
                return f"Entrada de {quantity} unidades de {product.name} registrada."
            else:
                product = Product(code, name, description, 0, price, min_stock)
                self.products[code] = product
                self.products[code].add_entry(quantity)
                return f"Produto {name} ({code}) adicionado ao estoque."

        else:
            return "Usuário não encontrado."


    def record_exit(self, code, user_name, quantity):
        if user_name in self.users:
            user = self.users[user_name]
            if code in self.products:
                product = self.products[code]
                
                product.add_exit(quantity)
                # Verificar se a quantidade após a entrada atingiu o estoque mínimo
                if product.quantity <= product.min_stock:
                    self.notify_replenishment(product)
                return f"Saída de {quantity} unidades de {product.name} registrada."
               
            else:
                return "Produto não encontrado."
        else:
            return "Usuário não encontrado."


    
    def generate_stock_report(self, report_type):
        if report_type == 'Produtos em estoque':
            emEstoque = []
            for product in self.products.values():
                
                product_info = {
                        "code": product.code,
                        "name": product.name,
                        "quantity": product.quantity
                }
                emEstoque.append(product_info)
                
            api_url = "https://jsonplaceholder.typicode.com/todos"
            mensagem = {"emEstoque": emEstoque}
            response = requests.post(api_url, json=mensagem)
            response.json()
            response.status_code

        elif report_type == 'Fluxo de movimentação':
            current_time = datetime.datetime.now()
            time = current_time - datetime.timedelta(minutes=2)

            fluxoMov = []
            for product in self.products.values():
            

                    # Filtrar os movimentos que ocorreram até 2 minutos atrás
                    for movement_time, movement_type, movement_quantity in product.movements:
                      
                        if movement_time >= time:
                            product_info={
                                "code": product.code,
                                "name": product.name,
                                "time": movement_time,
                                "type": movement_type,
                                "quantity": movement_quantity
                            }
                            fluxoMov.append(product_info)
                    
                
            
            api_url = "https://jsonplaceholder.typicode.com/todos"
            mensagem = {"fluxoMov": fluxoMov}
            response = requests.post(api_url, json=mensagem)
            response.json()
            response.status_code

                
        elif report_type == 'Lista de produtos sem saída':
                current_time = datetime.datetime.now()
                time= current_time - datetime.timedelta(minutes=1)

                unsold_products = []

                for product in self.products.values():
                    has_exit_movements = any(
                        movement_time >= time and movement_type == "saída"
                        for movement_time, movement_type, _ in product.movements
                    )

                    if not has_exit_movements:
                        unsold_products.append({
                            "code": product.code,
                            "name": product.name
                        })
            api_url = "https://jsonplaceholder.typicode.com/todos"
            mensagem = {"unsold_products": unsold_products}
            response = requests.post(api_url, json=mensagem)
            response.json()
            response.status_code
        


    def check_low_stock(self):

        for product in self.products.values():
            if product.quantity <= product.min_stock:
                self.notify_replenishment(product)

    def check_unsold_products(self):

        recent_product_movements = self.generate_stock_report("Fluxo de movimentação")
       

        limite_tempo = datetime.timedelta(minutes=1)
        tempo_atual = datetime.datetime.now()

        for product in self.products.values():
            counter = 0
            for info in product.movements:
                print(info[1])
                if info[1] == "saída":
                    tempo_saida = info[0]
                    diferenca_tempo = tempo_atual - tempo_saida
                    
                    # Verifique se a diferença de tempo é menor que o limite
                    if diferenca_tempo < limite_tempo:
                        counter += 1
                
            if counter == 0:
                self.notify_unsold_products(product)
            
    


    #@Pyro5.api.expose 
    def notify_replenishment(self, product):#def notify_replenishment(self, user_name, product):
        # Método para notificar o gestor quando um produto atinge o estoque mínimo

        for user_name, user_object in self.users.items():

            sse.publish({"Atenção Gestor {user_name} de objeto {user_object} e URI {user_object.client_object}, o produto {product.name} está fora de estoque": datetime.datetime.now()}, type='publish')
       
    #@Pyro5.api.expose
    def notify_unsold_products(self, product):
        # Método para enviar relatórios periódicos sobre produtos não vendidos
        print("unsold products")
        for user_name, user_object in self.users.items():
            sse.publish({"Atenção Gestor {user_name} de objeto {user_object} e URI {user_object.client_object}, o produto {product.name} não está sendo vendido": datetime.datetime.now()}, type='publish')


    def __reduce__(self):
     return (self.__class__, (self.name, self.public_key))
    
    
def periodic_check(stock_system):
    while True:
        # Verificar o estoque baixo e notificar o gestor
        #stock_system.check_low_stock()

        # Verificar produtos não vendidos e notificar o gestor
        stock_system.check_unsold_products()
        sleep(30)


# Configurar o servidor PyRO
if __name__ == "__main__":
    daemon = Pyro5.api.Daemon()
    ns = Pyro5.api.locate_ns()

    stock_system = StockManagementSystem()
    uri = daemon.register(stock_system)
    ns.register("stock_management_system", uri)
    print("Servidor PyRO pronto.")


    check_stock_thread = threading.Thread(target=periodic_check, args=(stock_system, )).start()

    daemon.requestLoop()
